sketools::numerical_table_summary(df_spoon, "diag_maladie") # à revoir
sketools::barplot_maker(result, "diag_maladie",
Pourcentage = F,
title = "mon test", flip = T
)
sketools::histogramme_maker(result, "diag_maladie")
sketools::piechart_maker(result,"diag_maladie")
sketools::scatter_plot_maker(df_spoon,"pro_sante" ) # à revoir
# pyramide usage:
df <- data.frame(age = c(1995, 1935, 1945, 1955, 1965, 1975,1975),
inf_sexe = c("Male", "Male", "Male", "Female", "Male","Male", "Female"))
sketools::pyramid_age_maker(df, "age")
df_piechart <- data.frame(category = c("A", "B", "A", "C", "B"))
piechart_maker(df_piechart, "category", pourcentage = TRUE)
df_upset <- data.frame(id = 1:5, sets = c("A, B", "B, C", "A, C", "A, B, C", "B, C"))
upstplot_maker(df_upset, "sets")
result <- sketools::data_recoding(df_spoon,df_bbl, sep = ",")
View(result)
sketools::decision_maker2(result, df_bbl,"diag_maladie")
sketools::data_engine(result,"diag_maladie")
data_engine(result,"diag_maladie")
decision_maker2(result, df_bbl,"diag_maladie")
data_engine(result,"diag_maladie")
sketools::barplot_maker(result, "diag_maladie",
Pourcentage = F,
title = "mon test", flip = T
)
sketools::barplot_maker(result, "diag_maladie",
Pourcentage = T,
title = "mon test", flip = T
)
sketools::barplot_maker(result, "diag_maladie",
Pourcentage = T,
title = "mon test",
flip = F
)
sketools::histogramme_maker(result, "diag_maladie")
sketools::histogramme_maker(result, "diag_maladie")
sketools::piechart_maker(result,"diag_maladie")
## Import sketools -------------------------------------------------------------
library(devtools)
load_all()
?data_recoding
?decision_maker2
decision_maker2(result, df_bbl,"diag_maladie")
?decision_maker2
?data_engine
data_engine(result,"diag_maladie")
# Example usage for a single variable:
df_single <- data.frame(category = c("A", "B", "A", "C", "B"))
data_engine(df_single, "category")
# Example usage for multiple response variables:
df_multi <- data.frame(var1 = c("A", "B", "A", "C", "B"),
var2 = c("X", "Y", "Z", "X", "Y"))
data_engine(df_multi, c("var1", "var2"))
## table desctiptive (numeric) -------------------------------------------------
sketools::numerical_table_summary(df_spoon, "diag_maladie") # à revoir
sketools::barplot_maker(result, "diag_maladie",
Pourcentage = T,
title = "mon test",
flip = F
)
?barplot_maker
?barplot_maker
## un hist ---------------------------------------------------------------------
?histogramme_maker
## un hist ---------------------------------------------------------------------
?histogramme_maker
## Import sketools -------------------------------------------------------------
library(devtools)
load_all()
## un hist ---------------------------------------------------------------------
?histogramme_maker
histogramme_maker
sketools::histogramme_maker(result, "diag_maladie")
custom_histogram <- function(data, variable,
x_label = NULL,
y_label = NULL,
line_color = "#000000",
fill_color = p_skezi[1],
palette = p_skezi,
line_type = "solid",
density_plot = FALSE,
mean_indicator = FALSE,
title_label = NULL) {
ggplot(data, aes_string(x = variable)) +
geom_histogram(color = line_color, fill = fill_color,
linetype = line_type, alpha = 0.5, position = "stack", stat = "count") +
xlab(x_label) +
ylab(y_label) +
ggtitle(paste(title_label, " - Count:", length(na.omit(data[, variable])))) +
# Add density plot if specified
if (density_plot) {
geom_density(color = palette[1])
} +
# Add mean indicator if specified
if (mean_indicator) {
geom_vline(aes(xintercept = mean(data[[variable]], na.rm = TRUE)),
linetype = "dashed", color = palette[2], size = 1)
} +
theme(axis.text = element_text(size = 8, face = "bold", color = palette[1]),
legend.key.size = unit(1, "cm"),
panel.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent", color = NA),
panel.grid.major = element_line(color = "black", size = 0.2, linetype = "dashed"),
panel.grid.minor = element_line(color = "black", size = 0.2, linetype = "dashed"),
legend.background = element_blank(),
legend.box.background = element_blank())
}
custom_histogram(result, "diag_maladie")
sketools::histogramme_maker(result, "diag_maladie")
## Import sketools -------------------------------------------------------------
library(devtools)
load_all()
?histogramme_maker
# Example usage
data <- data.frame(variable = rnorm(100))
histogramme_maker(data, "variable", "X-axis Label", "Y-axis Label", "#333333", "#66CC66", c("#66CC66", "#FF9933"), "dashed", TRUE, TRUE, "Your Plot Title")
data
custom_histogram <- function(data, variable,
x_label = NULL,
y_label = NULL,
line_color = "#000000",
fill_color = p_skezi[1],
palette = p_skezi,
line_type = "solid",
density_plot = FALSE,
mean_indicator = FALSE,
title_label = NULL) {
ggplot(data, aes_string(x = variable)) +
geom_histogram(color = line_color, fill = fill_color,
linetype = line_type, alpha = 0.5, position = "stack", stat = "count") +
xlab(x_label) +
ylab(y_label) +
ggtitle(paste(title_label, " - Count:", length(na.omit(data[, variable])))) +
# Add density plot if specified
if (density_plot) {
geom_density(color = palette[1])
} +
# Add mean indicator if specified
if (mean_indicator) {
geom_vline(aes(xintercept = mean(data[[variable]], na.rm = TRUE)),
linetype = "dashed", color = palette[2], size = 1)
} +
theme(axis.text = element_text(size = 8, face = "bold", color = palette[1]),
legend.key.size = unit(1, "cm"),
panel.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent", color = NA),
panel.grid.major = element_line(color = "black", size = 0.2, linetype = "dashed"),
panel.grid.minor = element_line(color = "black", size = 0.2, linetype = "dashed"),
legend.background = element_blank(),
legend.box.background = element_blank())
}
custom_histogram(data, "variable", "X-axis Label", "Y-axis Label", "#333333", "#66CC66", c("#66CC66", "#FF9933"), "dashed", TRUE, TRUE, "Your Plot Title")
library("ggVennDiagram")
diag_venn_maker = function(df, var) {
vals = na.omit(unique(unlist(str_split(df[, var], "\\| "))))
df$id <- seq_len(nrow(df))
kk = df[, c("id", var)] %>%
separate_rows(var, sep = "\\| ") %>%
table %>%
data.frame %>%
filter(Freq > 0)
x_names <- paste0("id_", tolower(vals))
x <- vector("list", length = length(vals))
for (i in seq_along(vals)) {
x[[i]] <- as.numeric(kk[kk[, var] == vals[i], "id"])
}
g = ggVennDiagram(
x,
set_siz = 2,
label_size = 2,
category.names = vals
)
return(g)
}
data <- data.frame(
variable = c("A | B", "B | C", "C", "A | B | C", "D | E", "F | G | H"),
value = c(10, 15, 8, 20, 5, 12)
)
# Using the diag_venn_maker function
venn_diagram <- diag_venn_maker(data, "variable")
data
# Using the diag_venn_maker function
venn_diagram <- diag_venn_maker(data, "variable")
data <- data.frame(
variable = c("A | B", "B | C", "C", "A | B | C"),
value = c(10, 15, 8, 20, 5, 12)
)
data <- data.frame(
variable = c("A | B", "B | C", "C", "A | B | C"),
value = c(10, 15, 8, 20)
)
data
# Using the diag_venn_maker function
venn_diagram <- diag_venn_maker(data, "variable")
# Display the Venn diagram
print(venn_diagram)
?diag_venn_maker
# pyramide usage: --------------------------------------------------------------
df <- data.frame(age = c(1995, 1935, 1945, 1955, 1965, 1975,1975),
inf_sexe = c("Male", "Male", "Male", "Female", "Male","Male", "Female"))
sketools::pyramid_age_maker(df, "age")
pyramid_age_maker
piechart_maker
sketools::scatter_plot_maker(df_spoon,"pro_sante" ) # à revoir
?decision_maker2
decision_maker2(result, df_bbl,"diag_maladie")
decision_maker2(df = result, df_bbl = df_bbl,var = "diag_maladie")
data_engine(df = result,
vars = "diag_maladie")
sketools::piechart_maker(df = result,var = "diag_maladie")
df_upset <- data.frame(id = 1:5, sets = c("A, B", "B, C", "A, C", "A, B, C", "B, C"))
upstplot_maker(df_upset, "sets")
## upset plot ------------------------------------------------------------------
df_upset <- data.frame(id = 1:5, sets = c("A, B", "B, C", "A, C", "A, B, C", "B, C"))
df_upset
upstplot_maker
df_upset <- data.frame(id = 1:5, sets = c("A, B", "B, C", "A, C", "A, B, C", "B, C"))
upstplot_maker(df = df_upset, vars = "sets")
?upstplot_maker
## Import sketools -------------------------------------------------------------
library(devtools)
load_all()
## Import sketools -------------------------------------------------------------
library(devtools)
load_all()
## Import sketools -------------------------------------------------------------
library(devtools)
load_all()
p_skezi = c('#A3A8D5','#22577A', '#E4611D','#38A3A5','#F6A436', '#57CC99','#80B7A3',
'#80ED99', '#C7F9CC','#477F8F','#8BD7D2','#6DB9A2','#89D7A0','#B6F0B9',
'#A9BEC6','#CEE9E8', '#CEE6D1','#E1EFDC','#FBD29A','#F1B08E','#D1D3EA')
FilePath = "C:/Users/Akram Hecini/Desktop/R/docker_rapport/rapport_v3/questionnaire_skethis.xlsx"
df_spoon = readxl::read_excel(FilePath,sheet = 1)
FilePath = "C:/Users/Akram Hecini/Desktop/R/docker_rapport/rapport_v3/BDV_skethis.xlsx"
df_bbl = readxl::read_excel(FilePath,sheet = 1) %>%
set_names(c("Variable...Field.name", "Form.name","Field.type",
"Field.input.type", "Field.label","Required.field",
"Conditions",  "Choices",  "Min.value", "Max.value"))
?data_recoding
?data_recoding
df_upset <- data.frame(id = 1:5, sets = c("A, B", "B, C", "A, C", "A, B, C", "B, C"))
?upstplot_maker
upstplot_maker
upstplot_maker(df = df_upset, vars = "sets", sep = ", ")
?upstplot_maker
data_engine = function(df,vars){
df_tmp = multi_response_organizer(df, vars)
data = df_tmp %>%
select(contains(vars)) %>%
drop_na() %>%
group_by(.) %>%
plyr::count()%>%
ungroup() %>%
group_by(.dots = vars[1]) %>%
mutate(pourcentage = paste0(round(freq/sum(freq)*100,2),"%"))
names(data) = c("Première variable","Deuxième Variable","Effectif","Pourcentage")
return(data)
}
p_skezi = c('#A3A8D5','#22577A', '#E4611D','#38A3A5','#F6A436', '#57CC99','#80B7A3',
'#80ED99', '#C7F9CC','#477F8F','#8BD7D2','#6DB9A2','#89D7A0','#B6F0B9',
'#A9BEC6','#CEE9E8', '#CEE6D1','#E1EFDC','#FBD29A','#F1B08E','#D1D3EA')
FilePath = "C:/Users/Akram Hecini/Desktop/R/docker_rapport/rapport_v3/questionnaire_skethis.xlsx"
df_spoon = readxl::read_excel(FilePath,sheet = 1)
FilePath = "C:/Users/Akram Hecini/Desktop/R/docker_rapport/rapport_v3/BDV_skethis.xlsx"
df_bbl = readxl::read_excel(FilePath,sheet = 1) %>%
set_names(c("Variable...Field.name", "Form.name","Field.type",
"Field.input.type", "Field.label","Required.field",
"Conditions",  "Choices",  "Min.value", "Max.value"))
## faire des tests -------------------------------------------------------------
data_engine(df_spoon, c("genre", "pro_activite"))
multi_response_organizer = function(df, vars, sep = ", "){
data = as.data.frame(
sapply(df[vars], function(x)
sapply(strsplit(as.character(x), sep , fixed = TRUE),
function(y) paste(
sort(unique(y)) , collapse=", "))))
data[data==""] <- NA
return(data)
}
## faire des tests -------------------------------------------------------------
data_engine(df_spoon, c("genre", "pro_activite"))
library(plumber)
library(dplyr)
library(gdata)
library(tidyr)
library(stringr)
library(ggplot2)
library(kableExtra)
library(stringi)
library(ggvenn)
library(pander)
library(magrittr)
library(flextable)
library(readxl)
library(mime)
library(writexl)
library(gtsummary)
library(ggplot2)
library(magrittr)
library(dplyr)
library(gt)
library(vtable)
library(tidyverse)
library(wordcloud)
library(wordcloud2)
library(tm)
library(SnowballC)
library(RColorBrewer)
library(sentimentr)
library(ComplexUpset)
library(rmarkdown)
library(htmlwidgets)
library(wordcloud2)
library(psych)
library(hot.deck)
library(officedown)
library(dplyr)
library(tidyr)
library(ggwordcloud)
library(stringr)
library(ggplot2)
library(kableExtra)
library(stringi)
library(ggvenn)
library(pander)
library(magrittr)
library(flextable)
library(officer)
library(rvg)
## faire des tests -------------------------------------------------------------
data_engine(df_spoon, c("genre", "pro_activite"))
## Import sketools -------------------------------------------------------------
library(devtools)
load_all()
## Import sketools -------------------------------------------------------------
library(devtools)
load_all()
p_skezi = c('#A3A8D5','#22577A', '#E4611D','#38A3A5','#F6A436', '#57CC99','#80B7A3',
'#80ED99', '#C7F9CC','#477F8F','#8BD7D2','#6DB9A2','#89D7A0','#B6F0B9',
'#A9BEC6','#CEE9E8', '#CEE6D1','#E1EFDC','#FBD29A','#F1B08E','#D1D3EA')
FilePath = "C:/Users/Akram Hecini/Desktop/R/docker_rapport/rapport_v3/questionnaire_skethis.xlsx"
df_spoon = readxl::read_excel(FilePath,sheet = 1)
FilePath = "C:/Users/Akram Hecini/Desktop/R/docker_rapport/rapport_v3/BDV_skethis.xlsx"
df_bbl = readxl::read_excel(FilePath,sheet = 1) %>%
set_names(c("Variable...Field.name", "Form.name","Field.type",
"Field.input.type", "Field.label","Required.field",
"Conditions",  "Choices",  "Min.value", "Max.value"))
?organize_multi_responses
df_multi_response <- data.frame(
var1 = c("A, B", "B, C", "A, C"),
var2 = c("X, Y", "Y, Z", "X, Z")
)
df_multi_response
organize_multi_responses(df_multi_response, c("var1", "var2"))
df_multi_response <- data.frame(
var1 = c("A, B", "B, C", "C, A"),
var2 = c("X, B", "Y, Z", "Z, A")
)
df_multi_response
df_multi_response <- data.frame(
var1 = c("A, B", "B, C", "A, C"),
var2 = c("X, B", "C, B", "C, A")
)
df_multi_response
df_multi_response <- data.frame(
var1 = c("A, B", "B, C", "A, C"),
var2 = c("X, B", "C, B", "C, A")
)
organize_multi_responses(df_multi_response, c("var1", "var2"))
## Import sketools -------------------------------------------------------------
library(devtools)
load_all()
## Multibarmaker ----------------------------------------------------
?organize_multi_responses
## Multibarmaker ----------------------------------------------------
?multibar_maker
## Import sketools -------------------------------------------------------------
library(devtools)
load_all()
## Multibarmaker ----------------------------------------------------
?multibar_maker
## Import sketools -------------------------------------------------------------
library(devtools)
load_all()
## Multibarmaker ----------------------------------------------------
?multibar_maker
## Import sketools -------------------------------------------------------------
library(devtools)
load_all()
## Multibarmaker ----------------------------------------------------
?multibar_maker
df_multi_response <- data.frame(
var1 = c("A, B", "B, C", "A, C"),
var2 = c("X, Y", "Y, Z", "X, Z")
)
multibar_maker(df_multi_response, c("var1", "var2"))
p_skezi = c('#A3A8D5','#22577A', '#E4611D','#38A3A5','#F6A436', '#57CC99','#80B7A3',
'#80ED99', '#C7F9CC','#477F8F','#8BD7D2','#6DB9A2','#89D7A0','#B6F0B9',
'#A9BEC6','#CEE9E8', '#CEE6D1','#E1EFDC','#FBD29A','#F1B08E','#D1D3EA')
multibar_maker(df_multi_response, c("var1", "var2"), p_skezi = p_skezi)
df_multi_response <- data.frame(
var1 = c("A, B", "B, C", "A, C"),
var2 = c("X, B", "C, B", "C, A")
)
organize_multi_responses(df_multi_response, c("var1", "var2"))
organize_multi_responses
organize_multi_responses(df_multi_response, c("var1", "var2"))
organize_multi_responses
df_multi_response <- data.frame(
var1 = c("A, B", "B, C", "A, C"),
var2 = c("X, B", "C, B", "C, A")
)
organize_multi_responses(df_multi_response, c("var1", "var2"))
df_multi_response <- data.frame(
var1 = c("A, B", "B, C", "A, C"),
var2 = c("X, Y", "Y, Z", "X, Z")
)
data_engine2 <- function(df, vars) {
if (length(vars) == 1) {
data <- df %>%
pull(vars) %>%
na.omit() %>%
as.factor() %>%
fct_count() %>%
dplyr::rename(group = f, value = n) %>%
mutate(freq = round(value / sum(value) * 100, 2),
pourcentage = paste0(round(value / sum(value) * 100, 2), "%"))
data$group <- unlist(lapply(
as.character(data$group),
function(x) ifelse(nchar(as.character(x)) > 25, paste0(substr(x, 1, 50), '...'), x)))
} else {
df_tmp <- multi_response_organizer(df, vars)
data <- df_tmp %>%
select(contains(vars)) %>%
gather(key = "key", value = "value") %>%
group_by(key, value) %>%
plyr::count() %>%
ungroup() %>%
group_by(key) %>%
mutate(freq = round(value / sum(value) * 100, 2),
pourcentage = paste0(round(value / sum(value) * 100, 2), "%"))
data$group <- unlist(lapply(
as.character(data$group),
function(x) ifelse(nchar(as.character(x)) > 25, paste0(substr(x, 1, 50), '...'), x)))
}
return(data)
}
library(profvis)
library(plumber)
library(dplyr)
library(gdata)
library(tidyr)
library(stringr)
library(ggplot2)
library(kableExtra)
library(stringi)
library(ggvenn)
library(pander)
library(magrittr)
library(flextable)
library(readxl)
library(mime)
library(writexl)
library(gtsummary)
library(ggplot2)
library(magrittr)
library(dplyr)
library(gt)
library(vtable)
library(tidyverse)
library(wordcloud)
library(wordcloud2)
library(tm)
library(SnowballC)
library(RColorBrewer)
library(sentimentr)
library(ComplexUpset)
library(rmarkdown)
library(htmlwidgets)
library(wordcloud2)
library(psych)
library(hot.deck)
library(officedown)
library(dplyr)
library(tidyr)
library(ggwordcloud)
library(stringr)
library(ggplot2)
library(kableExtra)
library(stringi)
library(ggvenn)
library(pander)
library(magrittr)
library(flextable)
library(officer)
library(rvg)
source("Fonctions.R")
## Import sketools -------------------------------------------------------------
library(devtools)
load_all()
p_skezi = c('#A3A8D5','#22577A', '#E4611D','#38A3A5','#F6A436', '#57CC99','#80B7A3',
'#80ED99', '#C7F9CC','#477F8F','#8BD7D2','#6DB9A2','#89D7A0','#B6F0B9',
'#A9BEC6','#CEE9E8', '#CEE6D1','#E1EFDC','#FBD29A','#F1B08E','#D1D3EA')
FilePath = "C:/Users/Akram Hecini/Desktop/R/docker_rapport/rapport_v3/questionnaire_skethis.xlsx"
df_spoon = readxl::read_excel(FilePath,sheet = 1)
FilePath = "C:/Users/Akram Hecini/Desktop/R/docker_rapport/rapport_v3/BDV_skethis.xlsx"
df_bbl = readxl::read_excel(FilePath,sheet = 1) %>%
set_names(c("Variable...Field.name", "Form.name","Field.type",
"Field.input.type", "Field.label","Required.field",
"Conditions",  "Choices",  "Min.value", "Max.value"))
