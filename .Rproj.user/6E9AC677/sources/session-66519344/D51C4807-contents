p_skezi = c('#22577A','#E4611D','#A3A8D5','#38A3A5','#F6A436', '#57CC99','#80B7A3',

            '#80ED99', '#C7F9CC','#477F8F','#8BD7D2','#6DB9A2','#89D7A0','#B6F0B9',

            '#A9BEC6','#CEE9E8', '#CEE6D1','#E1EFDC','#FBD29A','#F1B08E','#D1D3EA')



## data engine1 ----------------------------------------------------------------

data_engine = function(df,vars){

  df_tmp = multi_response_organizer(df, vars)

  data = df_tmp %>%
    select(contains(vars)) %>%
    drop_na() %>%
    group_by(.) %>%
    plyr::count()%>%
    ungroup() %>%
    group_by(.dots = vars[1]) %>%
    mutate(pourcentage = paste0(round(freq/sum(freq)*100,2),"%"))

  names(data) = c("Première variable","Deuxième Variable","Effectif","Pourcentage")

  return(data)

}

## get impairs -----------------------------------------------------------------

get_impair_numbers <- function(n) {
  impairs <- seq(1, n, by = 2)
  return(impairs[impairs <= n])
}

## fonction saveplot -----------------------------------------------------------

saveplot = function(df, df_bb, var) {

  p = decision_maker2(df,df_bbl, var)

  var_type = df_bbl[df_bbl$Variable...Field.name == var, "Field.type" ]

  if (var_type != "comment"){

    name = paste0("plot/",var,".png")

    ggsave(name,p, width = 7, height = 4)
  }


}


## tbl maker for slide ---------------------------------------------------------


tbl_maker = function(df, df_bbl, var) {

  question = df_bbl[df_bbl$Variable...Field.name == var, "Field.label"]

  tryCatch({

    df %>%
      select(var) %>%
      tbl_summary(
        by = NULL,
        label = list(
          var = "co_fond4_Age4"
        ),
        percent = "row",
        sort = NULL,
        missing = "always",
        missing_text = "(Manquant)",
        type = list(var ~ "continuous2"),
        statistic = list( var ~ c(
          "{N_nonmiss}",             # Nombre de non-manquants
          "{mean} ({sd})",           # Moyenne et écart type
          "{median} ({p25}-{p75})",  # Médiane, premier quartile et troisième quartile
          "{min}-{max}"              # Minimum et maximum
        )
        )

      ) %>% as_data_frame()



  }, error = function(e) {

    df %>%
      select(var) %>%
      tbl_summary(
        by = NULL,
        label = list(
          var = var # à rempalcer par la question
        ),
        percent = "row",
        sort = NULL,
        missing = "always",
        missing_text = "(Manquant)",
        type = list(var = "categorical")
      ) %>%  as_data_frame()

  }

  )
}


create_ppt = function(df, df_bbl) {

  directory_path <- "plot/"

  image_files <- list.files("plot/", pattern="*.png", full.names = T)

  ppt <- read_pptx("templ-ppt-SKEZI.pptx")

  for (file in image_files) {

    ma_var = substr(file, 6, nchar(file) - 4)

    title = df_bbl[df_bbl$Variable...Field.name == ma_var, "Field.label"]


    slide <- add_slide(ppt, layout = "1_slide contenu", master = "SKEZI")

    slide <- slide %>%

      ph_with(value = external_img(src = file, width = 20, height = 15),

              location =  ph_location(  left = 1.25,
                                        top = 1,
                                        width = 10,
                                        height = 6 )

      ) %>%


      ph_with(value = title$Field.label, location = ph_location_type(type = "title"))

  }


  print(ppt, "presentation.pptx")
}

# fonction recodage des données via la bbl de variables : ----------------------

data_recoding = function(df,df_bbl, sep = ','){

  tmp_bbl = df_bbl %>%

    dplyr::mutate(id = 1:n()) %>%

    separate_rows(Choices, sep = " \\| ") %>%

    mutate(new_choices = str_split_fixed(Choices,sep, 2))


  #la liste des variables à recoder ----------------------------------------------

  tmp_bbl$Number = trimws(tmp_bbl$new_choices[,1])
  tmp_bbl$Value = tmp_bbl$new_choices[,2]


  tmp_bbl = tmp_bbl %>% filter(!is.na(Choices))

  tmp_bbl = tmp_bbl %>%

    group_by(id) %>%

    dplyr::summarise(Variable...Field.name = unique(Variable...Field.name), across(c(Number, Value), list))


  if(nrow(tmp_bbl) > 0){
    for (i in tmp_bbl$Variable...Field.name[1:length(tmp_bbl$Variable...Field.name)]){

      # get le before et l'after
      before = unlist(tmp_bbl[tmp_bbl$Variable...Field.name == i,'Number'])
      after = unlist(tmp_bbl[tmp_bbl$Variable...Field.name == i,'Value'])

      # create a named list
      d = setNames(after, before)

      # create function
      f = function(x) str_split(x, ", ", simplify = TRUE) %>% {d[.]} %>% paste0(collapse = " | ")

      # apply function to all elements
      a = df %>%
        pull(i)

      tmp = map_chr(a, f)

      df[,i] = tmp

    }

    #df = as.data.frame(apply(df, 2, function(x) gsub("\\|NA|NA", NA, x)))
    df[] <- lapply(df, function(x) gsub("\\|NA|NA", NA, x))


    tmp = df %>%

      type.convert(as.is = TRUE) %>%

      select(where(is.numeric))

    df[,names(tmp)] = tmp
  }
  return(df)
}

# fonction pour changer les valeurs de bases : ---------------------------------

library(stringi)

vsub = function(df,vars, before, after){

  for (i in colnames(df[,vars])){

    df[,i] = stri_replace_all_regex(df[,i] ,
                                    pattern=before,
                                    replacement=after,
                                    vectorize=F)
  }


  return(df)

}



# fonction pour mettre les réponses multiples dans le même ordre : -------------

multi_response_organizer = function(df, vars, sep = ", "){
  
  data = as.data.frame(

    sapply(df[vars], function(x)

      sapply(strsplit(as.character(x), sep , fixed = TRUE),

             function(y) paste(

               sort(unique(y)) , collapse=", "))))

  data[data==""] <- NA

  return(data)
}

## multi_plot ------------------------------------------------------------------

multibar_maker = function(df,
                          vars,
                          flip = T,
                          p_skezi = p_skezi,
                          xlab_title = NULL,
                          ylab_title = NULL,
                          title = NULL) {

  df_tmp = multi_response_organizer(df, vars)

  data = df_tmp %>%
    select(contains(vars)) %>%
    drop_na() %>%
    group_by(.) %>%
    plyr::count()%>%
    ungroup() %>%
    group_by(.dots = vars[1]) %>%
    dplyr::mutate(freq = round(freq/sum(freq)*100,2)) %>%
    dplyr::mutate(pourcentage = paste0(round(freq/sum(freq)*100,2),"%"))

  names(data) = c("first","second","n","prc")

  ## créer le graphe :   -------------------------------------------------------

  g =  ggplot(data, aes(y = n, factor(x = first), fill = second)) +

    geom_bar(stat = "identity") +

    geom_text(aes(label = prc), position = position_stack(vjust = 0.5)) +

    theme( axis.text.x =  element_text (angle = 90, hjust = 1, vjust = 0.5 )) +

    scale_fill_manual(values = p_skezi) +

    {if(flip) coord_flip()} +

    xlab(xlab_title)+

    ylab(ylab_title) +

    ggtitle(title) +

    guides(colour = FALSE)

  return(g)

}

# fonction data engine 2 -------------------------------------------------------
data_engine2 = function(df, vars){

  if (length(vars) == 1) {

    data = df %>%
      pull(vars) %>%
      na.omit()%>%
      as.factor() %>%
      fct_count() %>%
      dplyr::rename(group = f, value = n) %>%
      mutate(freq = round(value/sum(value)*100,2)) %>%
      mutate(pourcentage = paste0(round(value/sum(value)*100,2),"%"))

    data$group = unlist(lapply(
      as.character(data$group),
      function(x) ifelse(nchar(as.character(x)) > 25, paste0(substr(x,1,50),'...'), x)))

  } else {

    df_tmp = multi_response_organizer(df, vars)

    data = df_tmp %>%
      select(contains(vars)) %>%
      gather(key = "key", value = "value") %>%
      group_by(key,value) %>%
      plyr::count()%>%
      ungroup() %>%
      group_by(key) %>%
      mutate(freq = round(value/sum(value)*100,2)) %>%
      mutate(pourcentage = paste0(round(value/sum(value)*100,2),"%"))

    data$group = unlist(lapply(
      as.character(data$group),
      function(x) ifelse(nchar(as.character(x)) > 25, paste0(substr(x,1,50),'...'), x)))
  }

  return(data)

}

# fonction pour les barplot empilé ---------------------------------------------

barplot_type = function (df,
                         var,
                         pos = "stack" ,
                         Pourcentage = T,
                         flip = T,
                         xlab_title = NULL,
                         ylab_title = NULL,
                         title = NULL) {

  ## créer la table des données: -----------------------------------------------
  data = data_engine2(df, var)

  ## en pourcentage ou en eff?  ----------------------------------------------

  if(Pourcentage == T){

    data[,3] = round(data[,3],2)
    names(data)[4] = "val"

  } else {
    names(data)[3] = "val"
  }

  ## créer le graphe :   -------------------------------------------------------

  g =  ggplot(data, aes(fill= value , y = val,
                        factor(x = key))) +

    geom_bar(stat = "identity",

             #fill = palette_skezi,


             position = pos ) +

    geom_text(aes(label =  round(val,2),

                  position = ifelse(pos,

                                    position_stack(vjust = 0.5),

                                    position_dodge(.9)),

                  color="black", hjust=0.5, vjust = 2)) +


    theme( axis.text.x =  element_text (angle = 90, hjust = 1, vjust = 0.5 )) +

    {if(flip) coord_flip() } +

    xlab(xlab_title)+

    ylab(ylab_title) +

    ggtitle(title) +

    guides(colour = FALSE)

  return(g)

}


# La fonction Barplot : --------------------------------------------------------

library(forcats)

barplot_maker = function(df,
                         var,
                         Pourcentage = F,
                         flip = T,
                         xlab_title = NULL,
                         ylab_title = NULL,
                         title = NULL,
                         palette_skezi = p_skezi){

  ## créer la table des données:
  data = data_engine2(df, var)

  ## en pourcentage ou en eff?

  if(Pourcentage == T){
    data[,3] = round(data[,3],2)
    names(data)[3] = "val"
    #data$val = round(val,2)
  } else {
    names(data)[2] = "val"
  }

  ## créer le graphe :
  ggplot(data, aes(x = group , y = val)) +

    geom_bar(stat = "identity", fill= palette_skezi[1], colour="black") +

    geom_text(aes(label = str_wrap(val,20),

                  position = "identity")) +

    theme(axis.text.x =  element_text (angle = 90, hjust = 1, vjust = 0.5 ))+

    {if(flip) coord_flip() } +

    xlab(xlab_title)+

    ylab(ylab_title) +

    ggtitle(title) +

    theme(axis.text = element_text(size = 8, face="bold", colour = '#A3DA8D'),
          legend.key.size = unit(1, 'cm'),
          panel.background = element_rect(fill='transparent', color=NA), #transparent panel bg
          plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
          panel.grid.major = element_blank(), #remove major gridlines
          panel.grid.minor = element_blank(), #remove minor gridlines
          legend.background = element_blank(), #transparent legend bg
          legend.box.background = element_blank() #transparent legend panel
    )

}

# Basic piechart ---------------------------------------------------------------
<
piechart_maker = function(df,
                          var,
                          Pourcentage = T,
                          palette_skezi = p_skezi,
                          xlab_title = NULL,
                          ylab_title = NULL,
                          title = NULL) {

  ## créer la table des données: ---------------------------------------------

  data = data_engine2(df, var)

  ## en pourcentage ou en eff?  ----------------------------------------------

  if(Pourcentage == T){

    data[,3] = round(data[,3],2)
    names(data)[3] = "val"

  } else {
    names(data)[2] = "val"
  }

  ## plot le pie chart -------------------------------------------------------

  ggplot(data, aes(x = "",  y = val , fill = group)) +

    geom_col() +

    coord_polar(theta = "y") +

    geom_text(aes(

      label =  paste0(round(val,1),"%")),

      position = position_stack(vjust = 0.5),

      color = "black",

      size=1.8,

      fontface = "bold")+

    scale_fill_manual( values = palette_skezi) +

    coord_polar(theta = "y", start = 0) +

    #theme_void()+

    xlab(xlab_title) +

    ylab(ylab_title) +

    ggtitle(title) +

    theme(legend.key.size = unit(1, 'cm'),
          panel.background = element_rect(fill='transparent', color=NA), #transparent panel bg
          plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          legend.background = element_blank(),
          legend.box.background = element_blank(),
          axis.ticks = element_blank(),
          axis.text = element_blank(),
          panel.grid  = element_blank()
    )

}

## -----------------------------------------------------------------------------

plot_theme = function(g){

  g = g + theme(axis.text = element_text(size = 8, face="bold", colour = '#A3DA8D'),
                legend.key.size = unit(1, 'cm'),
                panel.background = element_rect(fill='transparent'), #transparent panel bg
                plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
                panel.grid.major = element_blank(), #remove major gridlines
                panel.grid.minor = element_blank(), #remove minor gridlines
                legend.background = element_blank(), #transparent legend bg
                legend.box.background = element_blank() #transparent legend panel
  )}





## fonction boxplot ------------------------------------------------------------

library(ggplot2)
library(RColorBrewer)

boxplot_maker<- function(data,
                         Variable...Field.name,
                         group_by=NULL,fill_var=NULL,
                         prop=TRUE,vertical=FALSE,jitter=FALSE,
                         title="title",xlab="xlab",ylab="ylab",label_names="label_names",
                         minval=NULL,maxval=NULL,
                         my_color="#00BBFF",
                         my_palette=palette("Paired"))
{

  Nb_NA<-length(data[data[,Variable...Field.name]=='NA',Variable...Field.name])
  Prop_NA<-round(Nb_NA/length(data[,Variable...Field.name]),2)

  if(is.null(group_by)&&is.null(fill_var))
  {
    p<-ggplot(data=data,aes(x=factor(0),y=.data[[Variable...Field.name]]))+
      geom_boxplot(fill=my_color)

    if(!is.null(minval)&!is.null(maxval))
    {
      p<-p+ylim(minval,maxval)
    }
    if(jitter)
    {
      p<-p+geom_jitter(width=0.1,alpha=0.5)
    }


  }

  else if(!is.null(group_by)&& is.null(fill_var))
  {
    p<-ggplot(data=data,aes(x=.data[[Variable...Field.name]],y=.data[[group_by]],na.rm=TRUE))
    p <-p + geom_boxplot(aes(x =data[,group_by], y = data[, Variable...Field.name],fill=data[,group_by]), varwidth = TRUE,alpha=0.2) +
      scale_fill_manual(values= my_palette)

    if(!is.null(minval)&!is.null(maxval))
    {
      p<-p+xlim(minval,maxval)
    }

    if(jitter)
    {
      p<-p+geom_jitter(width=0.1,alpha=0.5)
    }

    my_xlab <- paste(levels(data[,group_by]),"\n(N=",table(data[,group_by]),")",sep="")
    p<-p+scale_x_discrete(labels=my_xlab)



  }

  else if(!is.null(group_by)&& !is.null(fill_var))
  {
    data2 <- data[!is.na(data[[Variable...Field.name]]) & !is.null(data[[group_by]]) & !is.null(data[[fill_var]]), ]
    p<-ggplot(data=data2,aes(x=.data[[Variable...Field.name]],y=.data[[group_by]],fill=.data[[fill_var]]))+
      geom_boxplot()+
      scale_fill_manual(values=my_palette)

    if(!is.null(minval)&!is.null(maxval))
    {
      p<-p+xlim(minval,maxval)
    }
    if(jitter)
    {
      p<-p+geom_jitter(width=0.1,alpha=0.5)
    }

  }



  if(prop)
  {

    p<-p+labs(title=title,caption =sprintf("Proportion of NA values : %.2f ",Prop_NA))
  }
  else
  {
    p<- p+labs(title=title)
  }

  if(vertical)
  {
    p<-p+coord_flip()
  }

  #Textual data
  p<-p+xlab(xlab) +
    ylab(ylab) +
    labs(fill=label_names)

  return(p)

}

## Histogramme maker -----------------------------------------------------------

histogramme_maker = function(data, var,
                             x_lab = NULL,
                             y_lab = NULL,
                             clr = palette("Paired")[4],
                             clr_fill = palette("Paired")[2],
                             ltype ="solid",
                             density_test,
                             mean_test,
                             title_lab = NULL)
{
  ggplot(data, aes_string(x= var)) +
    geom_histogram(color=clr, fill = clr_fill,
                   linetype = ltype, alpha=0.5, position="stack",stat = "count")+
    xlab(x_lab) +
    ylab (y_lab)+
    ggtitle(paste(title_lab, "effectif" , length(na.omit(data[,var]))))+
    geom_density(color= palette("Paired")[3])+
    scale_x_continuous(breaks=unique(data[[var]]), expand=c(0,0))
}

## scatter plot ----------------------------------------------------------------

scatter_plot_maker = function(data,
                              vars,
                              x_lab= NULL, y_lab=NULL, title_lab=NULL,
                              clr = "black", clr_fill = "black")
{
  ggplot(data, aes_string(x=vars[1], y=vars[2]))+
    geom_density_2d_filled( show.legend=T, alpha=0.5, color = palette("Paired")[2], bins =3)+
    #scale_fill_distiller(palette("Paired")[4])+
    geom_jitter(color = clr, fill = clr_fill, shape="circle")+
    xlab(x_lab)+
    ylab(y_lab)+
    ggtitle(paste(title_lab ,"effectif: ", length(na.omit(data[,vars[1]]))))+
    theme(axis.text = element_text(size = 8, face="bold"),
          legend.key.size = unit(1, 'cm'),
          panel.background = element_rect(fill='transparent'),
          plot.background = element_rect(fill='transparent', color=NA),
          panel.grid.major = element_line(color = "black", linetype="solid", size=0.2),
          panel.grid.minor = element_line(color="black",linetype="solid", size=0.2),
          legend.background = element_blank(),
          legend.box.background = element_blank())
}

## word cloud ------------------------------------------------------------------


wordcloud_maker = function (df,var) {

  text = df[,var]
  docs = VCorpus(VectorSource(text))

  #Replace special characters -----------------------------------------------------
  toSpace = content_transformer(function(x, pattern)gsub(pattern, " ", x))
  docs = tm_map(docs, toSpace, "/")
  docs = tm_map(docs, toSpace, "@")
  docs = tm_map(docs, toSpace, "'")

  #Remove punctuation
  docs = tm_map(docs, removePunctuation)

  #Remove french common stopwords
  docs = tm_map(docs, removeWords, c(stopwords("french"), "faire", "avoir", "être", "car", "'", "moins", "plus", ",", "comme", "journée", "très", "fait"))

  #Remove numbers
  docs = tm_map(docs, removeNumbers)

  #Make all lower case
  docs = tm_map(docs, content_transformer(tolower))

  #ELiminate extra white spaces
  docs = tm_map(docs, stripWhitespace)


  #Term_Document Matrix ----------------------------------------------------------

  dtm = TermDocumentMatrix(docs)
  m = as.matrix(dtm)
  v = sort(rowSums(m), decreasing = TRUE)
  d = data.frame(word = names(v), freq = v)

  #Wordcloud ---------------------------------------------------------------------

  png(paste0("plot/",var,".png"), width = 430, height = 430)

  my_plot = wordcloud(d$word,
                      d$freq,
                      c(3,.3),
                      max.words = 100,
                      random.order=FALSE,
                      rot.per=0.1,
                      use.r.layout=FALSE,
                      min.freq = 1,
                      colors=brewer.pal(8, "Dark2"))

  dev.off()

  return(my_plot)

}

## table maker -----------------------------------------------------------------

tableau_maker = function(data, list_var, by = NULL) {

  tmp = data %>%

    select(list_var) %>%

    tbl_summary(
      by= by,
      percent = "row",
      sort = NULL,
      missing = "always") %>%
    add_n()

  if (!is.null(by)){
    tmp = tmp %>%
      add_p()
  }

  as_gt(tmp)

}



#from numeric to interv --------------------------------------------------------

compute_interval_labels <- function(data_vector,
                                    num_intervals,
                                    p_skezi = p_skezi,
                                    description = FALSE){



  #Compute intervals------------------------------------------------------------
  intervals = quantile(as.numeric(data_vector), probs = seq(0, 1, length.out = num_intervals), na.rm = TRUE)
  #Interval Labels
  labels = paste("[", round(intervals[-num_intervals], 2), " - ", round(intervals[-1], 2), "[", sep = "")
  #Interval Data
  interval_data = cut(data_vector, breaks = intervals, labels = labels, include.lowest = TRUE)
  #Last interval correction
  last_interval_label <- paste("[", round(intervals[num_intervals], 2), " - ", "100", "]", sep = "")
  labels[length(labels)] <- last_interval_label
  #Original Data
  original_data = data_vector

  #Remove NA from the plot
  interval_data <- interval_data[!is.na(interval_data)]

  #Barplot----------------------------------------------------------------------
  library(ggplot2)

  p <- ggplot(data = data.frame(interval_data), aes(x = interval_data)) +

    geom_bar() +

    scale_x_discrete(guide = guide_axis(n.dodge = 2)) +

    geom_text(aes(label = ..count..), stat = "count", position = "identity",

              color="black", size=4) +

    xlab("Intervals") + ylab("Effectif")

  return(p)

}


#decision_maker ----------------------------------------------------------------

decision_maker2 = function(df,df_bbl,var){

  ## je récupère le type de chaque variable

  var_type_parts <- strsplit(df_bbl[df_bbl$Variable...Field.name == var, "Field.type" ], "_")[[1]]
  var_type <- var_type_parts[length(var_type_parts)]


  ## suivant le type j'appelle une fonction x
  if (var_type == "radiogroup"){

    p = piechart_maker(df, var)

  }

  else if (var_type == "dropdown"){

    p = plot_theme(barplot_maker(df, var))

  }

  else if (var_type == "checkbox"){

    leng = length(na.omit(unique(unlist(strsplit(as.character(df[,var]), ", ")))))

    if (leng <= 4){

      p = diag_venn_maker(df, var)

    } else {

      p = plot_theme(upstPlot_maker(df, var))

    }

  }

  else if (var_type == "rating"){

    p = barplot_maker(df, var)

    return(p)

  }

  else if (var_type == "boolean"){

    p = piechart_maker(df, var)

  }

  else if (var_type == "text"){

    sous_type = df_bbl[df_bbl$Variable...Field.name == var, "Field.input.type" ]

    if (is.na(sous_type) || sous_type == "text"){

      wordcloud_maker(df, var)

    } else if (sous_type == "date") {


      data_vector = as.numeric(format(as.Date(df[,var]), "%Y"))

      p = compute_interval_labels(data_vector,
                                  num_intervals = 10,
                                  description = TRUE)

    } else if (sous_type == "number") {


      data_vector = df[,var]

      p = compute_interval_labels(data_vector,
                                  num_intervals = 5,
                                  description = TRUE)

    } else if (sous_type == "range") {

      p = plot_theme(histogramme_maker(df, var))

    } else if (sous_type == "time") {

      p = plot_theme(histogramme_maker(df, var))

    } else if (sous_type == "month") {

      p = plot_theme(barplot_maker(df, var))

    } else  {
      invisible()
    }

  }

  else if (var_type == "comment"){

    wordcloud_maker(df, var)

  }

  else if (var_type == "number"){


    if(!is.discrete(df[,var]))
    {
      p = histogramme_maker(df,var)
    }

    else
    {
      p = compute_interval_labels(df[,var], num_intervals = 6, description = TRUE)
    }

  }

  else if (is.numeric(df[,var])) {

    if(!is.discrete(df[,var], cutoff = 15)) # discret ou non
    {
      p = histogramme_maker(df,var)
    }

    else
    {
      #p = compute_interval_labels(df[,var], num_intervals = 6, description = TRUE)
      invisible()
    }

  }

  else if (is.double(df[,var])){

    p = barplot_maker2(df,var)

  }

  return(p)

}



## DIAGRAM DE VENN -------------------------------------------------------------

library("ggVennDiagram")

diag_venn_maker = function(df, var) {

  vals = na.omit(unique(unlist(str_split(df[, var], "\\| "))))

  df$id <- seq_len(nrow(df))

  kk = df[, c("id", var)] %>%

    separate_rows(var, sep = "\\| ") %>%

    table %>%

    data.frame %>%

    filter(Freq > 0)

  x_names <- paste0("id_", tolower(vals))
  x <- vector("list", length = length(vals))

  for (i in seq_along(vals)) {
    x[[i]] <- as.numeric(kk[kk[, var] == vals[i], "id"])
  }

  g = ggVennDiagram(
    x,
    set_siz = 2,
    label_size = 2,
    category.names = vals
  )

  return(g)

}

# Function to remove content inside parentheses --------------------------------
remove_inside_parentheses <- function(x) {
  x <- gsub("\\([^)]+\\)", "", x)
  return(x)
}


## upset plot ------------------------------------------------------------------
upstPlot_maker = function(df, vars){

  df = df %>% mutate(id = row_number())

  tmp_df = df[,c("id",vars)] %>%
    drop_na() %>%
    separate_rows(vars, sep = " \\| ") %>%
    table

  tmp_df =

    as.data.frame.matrix(tmp_df) %>%

    mutate_all( function(x) as.logical(as.numeric(x)))


  cleaned_colnames <- unname(sapply(names(tmp_df), remove_inside_parentheses))

  names(tmp_df) = cleaned_colnames

  imge = upset(tmp_df,cleaned_colnames,
               width_ratio=0.3,
               min_size = 1,
               n_intersections = 12)

  return(imge)
}


## puyramide age : -------------------------------------------------------------

pyramid_age_maker <- function(df,
                              var,
                              axis_col = "black",                               #Axis' number's color
                              axis_size = 12,                                   #Size of axis' legend
                              #Color of the 2nd barplot (left)
                              switch_col = FALSE,                               #Switch color of the 2 barplot
                              title = "Pyramide d'âge"

) {

  df$age = 2023 - df[,var]

  df = df %>%
    mutate(
      # Create categories
      age_group = dplyr::case_when(
        age >= 18 & age <= 29 ~ "18-29",
        age >= 30 & age < 40 ~ "30-39",
        age >= 40 & age < 50 ~ "40-49",
        age >= 50 & age < 60 ~ "50-59",
        age >= 60 & age < 70 ~ "60-69",
        age >= 70 & age < 80 ~ "70-79",
        age >= 80             ~ "80 ou plus"
      ),
      # Convert to factor
      age_group = factor(
        age_group,
        level = c("18-29","30-39", "40-49","50-59","60-69","70-79","80 ou plus")
      )
    )




  #Palette
  col_1 = "#E5788F"
  col_2 = "#79D2E6"

  #Creation of data.frame with only "sex" & "age_group"
  data <- df %>%
    select(age_group,inf_sexe) %>%
    drop_na()

  #Data sexe to name modalities in the function and determine top two sexes
  sexe_data <- data %>%
    pull(inf_sexe) %>%
    fct_count() %>%
    arrange(desc(n)) %>%
    slice_head(n = 2) %>%
    pull(f)

  #To Determine the top two sexes for filtered_data
  top_two_sexes <- data %>%
    count(inf_sexe) %>%
    arrange(desc(n)) %>%
    slice_head(n = 2)

  #Filter data to include only the 2 sexes that are the most represented
  filtered_data <- df %>%
    filter(inf_sexe %in% top_two_sexes$inf_sexe)

  AgeStructure = ggplot(data = data, aes(x=as.factor(age_group) , fill = inf_sexe ))+
    geom_bar(data=subset(data,inf_sexe== sexe_data[1]))+
    geom_bar(data=subset(data,inf_sexe== sexe_data[2]),
             aes(y=after_stat(count)*(-1))) +


    ggtitle("Pyramide d'âge", paste0("n = ",nrow(filtered_data))) +

    xlab("Tranches d'âge") +
    ylab("Effectif") +
    labs(fill="Sexe") +
    coord_flip() +
    theme(axis.text = element_text(size = axis_size, face="bold",
                                   colour = axis_col),
          legend.key.size = unit(1, 'cm'),
          panel.background = element_rect(fill='transparent'),
          plot.background = element_rect(fill='transparent', color=NA),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          legend.background = element_rect(fill='transparent'),
          legend.box.background = element_rect(fill='transparent'))

  #Switch the color of the barplot if necessary
  if(switch_col == TRUE){
    col_1 = "#79D2E6"
    col_2 = '#E5788F'
  }

  return(AgeStructure)

}



##Table_summary for text and comment variables-------------------------------------

numerical_table_summary<-function(df,vars,labels=NULL,ranges=FALSE)
{
  tab_df<-df[,vars]

  if(!is.null(labels)&&length(labels)==length(vars))
  {
    combined <- list(labels = labels, vars = vars)

    for (i in seq_along(combined$labels))
    {
      label <- combined$labels[i]
      var <- combined$vars[i]

      tab_df[[label]] <- tab_df[[var]]
      tab_df <- tab_df[, setdiff(colnames(tab_df), vars)]
    }

  }
  my_tableau<-describe(tab_df,ranges=FALSE,quant=c(0.25,0.50,0.75))
  table_df<- as.data.frame(my_tableau)

  table_df <- table_df[, setdiff(colnames(table_df), c("vars", "skew", "kurtosis", "se"))]

  tmp<-rep(nrow(df),times=nrow(table_df))

  table_df$Effectif<-table_df$n
  table_df$Manquant<-tmp-table_df$Effectif
  table_df$Moyenne<-table_df$mean
  table_df$EcartType<-table_df$sd
  table_df$Q1 <- table_df$Q0.25
  table_df$Médiane<-table_df$Q0.5
  table_df$Q3<-table_df$Q0.75

  table_df <- table_df[, setdiff(colnames(table_df),c("n","mean","sd","Q0.25","Q0.5","Q0.75"))]
  return(table_df)
}

text_table_summary <- function(df,var){

  len <- function(texte){return(nchar(texte))}

  wc <- function(texte){
    if(is.na(texte)){return(NA)}
    return(length(unlist(strsplit(texte, " "))))
  }

  num_char<-"Nombre de caractères"
  num_word<-"Nombre de mots"


  nchar_data<-sapply(df[,var],len)

  wc_data<-sapply(df[,var],wc)

  text_frame<- tibble(!!num_word:= wc_data,!!num_char:=nchar_data)


  table_data<-t(numerical_table_summary(text_frame,vars=c("Nombre de mots","Nombre de caractères")))

  return(table_data)

}


survey_table <- function(df, df_bbl) {
  num_participant <- "Nombre de participants"
  num_pages <- "Nombre de pages"
  num_quest <- "Nombre de questions"
  num_mand_quest <- "Dont obligatoires"
  num_include_part <- "Respectant l'inclusion"

  survey_df <- tibble(
    parameter = c(num_participant, num_include_part, num_pages, num_quest, num_mand_quest),
    value = c(nrow(df), NA, length(unique(df_bbl$Form.name)), nrow(df_bbl), nrow(df_bbl[df_bbl$Required.field == "yes", ]))
  )

  return(survey_df)
}

## générer des pairs -----------------------------------------------------------

generate_unique_pairs <- function(column_names_list, n) {

  if (length(column_names_list) < 2) {
    stop("Not enough columns to form a pair.")
  }

  all_pairs <- combn(column_names_list, 2, simplify = TRUE)
  num_all_pairs <- ncol(all_pairs)

  if (num_all_pairs == 0) {
    warning("No more unique pairs available.")
    return(NULL)
  }

  selected_indices <- sample(1:num_all_pairs, n)

  selected_pairs <- as.data.frame(all_pairs[, selected_indices])



  return(selected_pairs)
}

